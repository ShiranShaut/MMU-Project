package com.hit.server;

import java.net.Socket;

import javax.xml.ws.Response;

import com.hit.dm.DataModel;
import com.hit.services.CacheUnitController;

import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.Runnable;
import java.lang.reflect.Type;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;

public class HandleRequest<T> implements Runnable {

	Socket socket;
	CacheUnitController<T> controller;

	public HandleRequest(Socket s, CacheUnitController<T> controller) {
		socket = s;
		this.controller = controller;
	}

	@Override
	public void run() {

		ObjectOutputStream out = null;
		ObjectInputStream in = null;
		Request<DataModel<T>[]> request = null;

		try {
			out = new ObjectOutputStream(socket.getOutputStream());
			in = new ObjectInputStream(socket.getInputStream());
			String req = (String)in.readObject();

			if (req.equals("showStatistics")) {
				out.writeObject(controller.getStatistics());
			} else {
				Type ref = new TypeToken<Request<DataModel<T>[]>>(){}.getType();
				JsonReader reader = new JsonReader(new FileReader(req));
				request = new Gson().fromJson(reader, ref);
				
				String actionType = request.getHeaders().get("action");

				if (actionType != null) {

					switch (actionType) {
					case "GET": {
						DataModel[] response = controller.get(request.getBody());
						
						if (response != null) {
							out.writeObject(response);
						}
						break;
					}
					case "UPDATE": {
						boolean response = controller.update(request.getBody());
						out.writeObject(response);
						break;
					}
					case "DELETE": {
						boolean response = controller.delete(request.getBody());
						out.writeObject(response);
						break;
					}
					}
				}
			}
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
}