package com.hit.server;

import java.net.Socket;
import java.util.Scanner;

import javax.sound.midi.ControllerEventListener;

import com.hit.dm.DataModel;
import com.hit.services.CacheUnitController;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.Runnable;
import java.lang.reflect.Type;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

public class HandleRequest<T> implements Runnable {

	Socket socket;
	CacheUnitController<T> controller;

	public HandleRequest(Socket s, CacheUnitController<T> controller) {
		socket = s;
		this.controller = controller;
	}

	@Override
	public void run() {

		ObjectOutputStream out = null;
		ObjectInputStream in = null;
		Scanner scanner;
		Request<DataModel<T>[]> request = null;

		try {
			in = new ObjectInputStream(socket.getInputStream());
			//scanner = new Scanner(socket.getInputStream());
			//String req = scanner.nextLine();
			String req = (String)in.readObject();

			if (req.equals("showStatistics")) {
				out = new ObjectOutputStream(socket.getOutputStream());
				out.writeObject(controller.getStatistics());
			} else {
				Type ref = new TypeToken<Request<DataModel<T>[]>>() {}.getType();
				request = new Gson().fromJson(req, ref);

				String actionType = request.getHeaders().get("action");

				if (actionType != null) {

					switch (actionType) {
					case "get": {
						out.writeObject(controller.get(request.getBody()));
						break;
					}
					case "update": {
						out.writeObject(controller.update(request.getBody()));
						break;
					}
					case "delete": {
						out.writeObject(controller.delete(request.getBody()));
						break;
					}
					}
				}
			}
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
}