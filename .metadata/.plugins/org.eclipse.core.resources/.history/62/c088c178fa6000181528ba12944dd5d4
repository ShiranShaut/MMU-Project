package com.hit.server;

import java.net.Socket;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

import javax.sound.midi.ControllerEventListener;

import com.hit.dm.DataModel;
import com.hit.services.CacheUnitController;

import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.Runnable;
import java.lang.reflect.Type;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

public class HandleRequest<T> implements Runnable {

	Socket socket;
	CacheUnitController<T> controller;

	public HandleRequest(Socket s, CacheUnitController<T> controller) {
		socket = s;
		this.controller = controller;
	}

	@Override
	public void run() {

		ObjectOutputStream out = null;
		ObjectInputStream in = null;
		Request<DataModel<T>[]> request = null;

		try {
			in = new ObjectInputStream(socket.getInputStream());
			String req = (String)in.readObject();

			if (req.equals("showStatistics")) {
				out = new ObjectOutputStream(socket.getOutputStream());
				out.writeObject(controller.getStatistics());
			} else {
				Type ref = new TypeToken<Request<DataModel<T>[]>>() {}.getType();
				
				Long num1 = (long) 111111;
				Long num2 = (long) 222222;
				Long num3 = (long) 33333;
				DataModel<String> dataModel1 = new DataModel(num1, "Some String Data");
				DataModel<String> dataModel2 = new DataModel(num1, null);
				DataModel<String> dataModel3 = new DataModel(num2, null);
				DataModel<String> dataModel4 = new DataModel(num3, null);
				
				Map<String,String> head1 = new HashMap();
				head1.put("action", "UPDATE");
				
				Map<String,String> head2 = new HashMap();
				head2.put("action", "GET");
				
				Map<String,String> head3 = new HashMap();
				head3.put("action", "DELETE");
				
				DataModel<String>[] arr = new DataModel[2];
				arr[0] = dataModel2;
				arr[1] = dataModel3;
				
				Request<DataModel<String>[]> requ1 = new Request<DataModel<String>[]>(head2, arr);
				
				new Gson().toJson(requ1, new FileWriter(req));
				
				
				request = new Gson().fromJson(req, ref);

				String actionType = request.getHeaders().get("action");

				if (actionType != null) {

					switch (actionType) {
					case "get": {
						out.writeObject(controller.get(request.getBody()));
						break;
					}
					case "update": {
						out.writeObject(controller.update(request.getBody()));
						break;
					}
					case "delete": {
						out.writeObject(controller.delete(request.getBody()));
						break;
					}
					}
				}
			}
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
}